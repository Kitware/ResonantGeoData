# Generated by Django 3.2 on 2021-04-29 03:26

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetRole',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('name', models.TextField(help_text="The name of the asset's role.", unique=True)),
                (
                    'description',
                    models.TextField(
                        help_text='Multi-line description to add further asset role information.'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionKeywords',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'name',
                    models.TextField(
                        help_text='A keyword to describe the Collection.', unique=True
                    ),
                ),
                (
                    'description',
                    models.TextField(
                        help_text='Multi-line description to add further asset keyword information.'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='InstrumentName',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemProperty',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'item',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='properties',
                        to='stac.item',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'name',
                    models.TextField(
                        help_text='Data license(s) as a SPDX License identifier.', unique=True
                    ),
                ),
                ('content', models.TextField(help_text='The license content.')),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'left_catalog',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='links',
                        to='stac.catalog',
                    ),
                ),
                (
                    'left_collection',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='links',
                        to='stac.collection',
                    ),
                ),
                (
                    'left_item',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='links',
                        to='stac.item',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LinkRelType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MediaType',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('term', models.TextField(unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProviderRole',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'name',
                    models.TextField(
                        help_text="The name of the organization's or the individual's role.",
                        unique=True,
                    ),
                ),
                (
                    'description',
                    models.TextField(
                        help_text='Multi-line description to add further provider role information.'
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonBasicsAsset',
            fields=[
                ('title', models.TextField(help_text='A human readable title.')),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed multi-line description. CommonMark 0.29 syntax MAY be used for rich text representation.',
                        null=True,
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonBasics',
                        serialize=False,
                        to='stac.asset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonBasicsCatalog',
            fields=[
                ('title', models.TextField(help_text='A human readable title.')),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed multi-line description. CommonMark 0.29 syntax MAY be used for rich text representation.'
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonBasics',
                        serialize=False,
                        to='stac.catalog',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonBasicsCollection',
            fields=[
                ('title', models.TextField(help_text='A human readable title.')),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed multi-line description. CommonMark 0.29 syntax MAY be used for rich text representation.'
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonBasics',
                        serialize=False,
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonBasicsItem',
            fields=[
                ('title', models.TextField(help_text='A human readable title.')),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed multi-line description. CommonMark 0.29 syntax MAY be used for rich text representation.',
                        null=True,
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonBasics',
                        serialize=False,
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonBasicsItemProperty',
            fields=[
                ('title', models.TextField(help_text='A human readable title.')),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed multi-line description. CommonMark 0.29 syntax MAY be used for rich text representation.',
                        null=True,
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonBasics',
                        serialize=False,
                        to='stac.itemproperty',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonBasicsLink',
            fields=[
                ('title', models.TextField(help_text='A human readable title.')),
                (
                    'description',
                    models.TextField(
                        help_text='Detailed multi-line description. CommonMark 0.29 syntax MAY be used for rich text representation.',
                        null=True,
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonBasics',
                        serialize=False,
                        to='stac.link',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonDateAndTimeAsset',
            fields=[
                (
                    'datetime',
                    models.DateTimeField(
                        help_text='The searchable date and time of the metadata, in UTC.', null=True
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(help_text='Creation date and time the data.', null=True),
                ),
                (
                    'updated',
                    models.DateTimeField(
                        help_text='Date and time the data was updated last.', null=True
                    ),
                ),
                (
                    'start_datetime',
                    models.DateTimeField(
                        help_text='The first or start date and time for the Item, in UTC.',
                        null=True,
                    ),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        help_text='The last or end date and time for the Item, in UTC.', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonDateAndTime',
                        serialize=False,
                        to='stac.asset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonDateAndTimeCatalog',
            fields=[
                (
                    'datetime',
                    models.DateTimeField(
                        help_text='The searchable date and time of the metadata, in UTC.', null=True
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(help_text='Creation date and time the data.', null=True),
                ),
                (
                    'updated',
                    models.DateTimeField(
                        help_text='Date and time the data was updated last.', null=True
                    ),
                ),
                (
                    'start_datetime',
                    models.DateTimeField(
                        help_text='The first or start date and time for the Item, in UTC.',
                        null=True,
                    ),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        help_text='The last or end date and time for the Item, in UTC.', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonDateAndTime',
                        serialize=False,
                        to='stac.catalog',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonDateAndTimeCollection',
            fields=[
                (
                    'datetime',
                    models.DateTimeField(
                        help_text='The searchable date and time of the metadata, in UTC.', null=True
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(help_text='Creation date and time the data.', null=True),
                ),
                (
                    'updated',
                    models.DateTimeField(
                        help_text='Date and time the data was updated last.', null=True
                    ),
                ),
                (
                    'start_datetime',
                    models.DateTimeField(
                        help_text='The first or start date and time for the Item, in UTC.',
                        null=True,
                    ),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        help_text='The last or end date and time for the Item, in UTC.', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonDateAndTime',
                        serialize=False,
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonDateAndTimeItem',
            fields=[
                (
                    'datetime',
                    models.DateTimeField(
                        help_text='The searchable date and time of the metadata, in UTC.', null=True
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(help_text='Creation date and time the data.', null=True),
                ),
                (
                    'updated',
                    models.DateTimeField(
                        help_text='Date and time the data was updated last.', null=True
                    ),
                ),
                (
                    'start_datetime',
                    models.DateTimeField(
                        help_text='The first or start date and time for the Item, in UTC.',
                        null=True,
                    ),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        help_text='The last or end date and time for the Item, in UTC.', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonDateAndTime',
                        serialize=False,
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonDateAndTimeItemProperty',
            fields=[
                (
                    'datetime',
                    models.DateTimeField(
                        help_text='The searchable date and time of the metadata, in UTC.', null=True
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(help_text='Creation date and time the data.', null=True),
                ),
                (
                    'updated',
                    models.DateTimeField(
                        help_text='Date and time the data was updated last.', null=True
                    ),
                ),
                (
                    'start_datetime',
                    models.DateTimeField(
                        help_text='The first or start date and time for the Item, in UTC.',
                        null=True,
                    ),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        help_text='The last or end date and time for the Item, in UTC.', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonDateAndTime',
                        serialize=False,
                        to='stac.itemproperty',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonDateAndTimeLink',
            fields=[
                (
                    'datetime',
                    models.DateTimeField(
                        help_text='The searchable date and time of the metadata, in UTC.', null=True
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(help_text='Creation date and time the data.', null=True),
                ),
                (
                    'updated',
                    models.DateTimeField(
                        help_text='Date and time the data was updated last.', null=True
                    ),
                ),
                (
                    'start_datetime',
                    models.DateTimeField(
                        help_text='The first or start date and time for the Item, in UTC.',
                        null=True,
                    ),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        help_text='The last or end date and time for the Item, in UTC.', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonDateAndTime',
                        serialize=False,
                        to='stac.link',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonInstrumentAsset',
            fields=[
                (
                    'platform',
                    models.TextField(
                        help_text='Unique name of the specific platform to which the instrument is attached.',
                        null=True,
                    ),
                ),
                (
                    'constellation',
                    models.TextField(
                        help_text='Name of the constellation to which the platform belongs.',
                        null=True,
                    ),
                ),
                (
                    'mission',
                    models.TextField(
                        help_text='Name of the mission for which data is collected.', null=True
                    ),
                ),
                (
                    'gsd',
                    models.FloatField(
                        help_text='Ground Sample Distance at the sensor, in meters (m).', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonInstrument',
                        serialize=False,
                        to='stac.asset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonInstrumentCatalog',
            fields=[
                (
                    'platform',
                    models.TextField(
                        help_text='Unique name of the specific platform to which the instrument is attached.',
                        null=True,
                    ),
                ),
                (
                    'constellation',
                    models.TextField(
                        help_text='Name of the constellation to which the platform belongs.',
                        null=True,
                    ),
                ),
                (
                    'mission',
                    models.TextField(
                        help_text='Name of the mission for which data is collected.', null=True
                    ),
                ),
                (
                    'gsd',
                    models.FloatField(
                        help_text='Ground Sample Distance at the sensor, in meters (m).', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonInstrument',
                        serialize=False,
                        to='stac.catalog',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonInstrumentCollection',
            fields=[
                (
                    'platform',
                    models.TextField(
                        help_text='Unique name of the specific platform to which the instrument is attached.',
                        null=True,
                    ),
                ),
                (
                    'constellation',
                    models.TextField(
                        help_text='Name of the constellation to which the platform belongs.',
                        null=True,
                    ),
                ),
                (
                    'mission',
                    models.TextField(
                        help_text='Name of the mission for which data is collected.', null=True
                    ),
                ),
                (
                    'gsd',
                    models.FloatField(
                        help_text='Ground Sample Distance at the sensor, in meters (m).', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonInstrument',
                        serialize=False,
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonInstrumentItem',
            fields=[
                (
                    'platform',
                    models.TextField(
                        help_text='Unique name of the specific platform to which the instrument is attached.',
                        null=True,
                    ),
                ),
                (
                    'constellation',
                    models.TextField(
                        help_text='Name of the constellation to which the platform belongs.',
                        null=True,
                    ),
                ),
                (
                    'mission',
                    models.TextField(
                        help_text='Name of the mission for which data is collected.', null=True
                    ),
                ),
                (
                    'gsd',
                    models.FloatField(
                        help_text='Ground Sample Distance at the sensor, in meters (m).', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonInstrument',
                        serialize=False,
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonInstrumentItemProperty',
            fields=[
                (
                    'platform',
                    models.TextField(
                        help_text='Unique name of the specific platform to which the instrument is attached.',
                        null=True,
                    ),
                ),
                (
                    'constellation',
                    models.TextField(
                        help_text='Name of the constellation to which the platform belongs.',
                        null=True,
                    ),
                ),
                (
                    'mission',
                    models.TextField(
                        help_text='Name of the mission for which data is collected.', null=True
                    ),
                ),
                (
                    'gsd',
                    models.FloatField(
                        help_text='Ground Sample Distance at the sensor, in meters (m).', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonInstrument',
                        serialize=False,
                        to='stac.itemproperty',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonInstrumentLink',
            fields=[
                (
                    'platform',
                    models.TextField(
                        help_text='Unique name of the specific platform to which the instrument is attached.',
                        null=True,
                    ),
                ),
                (
                    'constellation',
                    models.TextField(
                        help_text='Name of the constellation to which the platform belongs.',
                        null=True,
                    ),
                ),
                (
                    'mission',
                    models.TextField(
                        help_text='Name of the mission for which data is collected.', null=True
                    ),
                ),
                (
                    'gsd',
                    models.FloatField(
                        help_text='Ground Sample Distance at the sensor, in meters (m).', null=True
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonInstrument',
                        serialize=False,
                        to='stac.link',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonLicensingAsset',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonLicensing',
                        serialize=False,
                        to='stac.asset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonLicensingCatalog',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonLicensing',
                        serialize=False,
                        to='stac.catalog',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonLicensingCollection',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonLicensing',
                        serialize=False,
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonLicensingItem',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonLicensing',
                        serialize=False,
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonLicensingItemProperty',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonLicensing',
                        serialize=False,
                        to='stac.itemproperty',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonLicensingLink',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonLicensing',
                        serialize=False,
                        to='stac.link',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonProviderAsset',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonProvider',
                        serialize=False,
                        to='stac.asset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonProviderCatalog',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonProvider',
                        serialize=False,
                        to='stac.catalog',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonProviderCollection',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonProvider',
                        serialize=False,
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonProviderItem',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonProvider',
                        serialize=False,
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonProviderItemProperty',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonProvider',
                        serialize=False,
                        to='stac.itemproperty',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='CommonProviderLink',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='CommonProvider',
                        serialize=False,
                        to='stac.link',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='coreAsset',
            fields=[
                ('href', models.URLField(help_text='URI to the asset object.')),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='core',
                        serialize=False,
                        to='stac.asset',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='coreCollection',
            fields=[
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='core',
                        serialize=False,
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='coreItem',
            fields=[
                (
                    'geometry',
                    django.contrib.gis.db.models.fields.GeometryField(
                        help_text='Defines the full footprint of the asset represented by this item, formatted according to RFC 7946, section 3.1. The footprint should be the default GeoJSON geometry, though additional geometries can be included. Coordinates are specified in Longitude/Latitude or Longitude/Latitude/Elevation based on WGS 84.',
                        null=True,
                        srid=4326,
                    ),
                ),
                (
                    'ptr',
                    models.OneToOneField(
                        db_column='id',
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='core',
                        serialize=False,
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ProviderObject',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'name',
                    models.TextField(
                        help_text='The name of the organization or the individual.', unique=True
                    ),
                ),
                (
                    'description',
                    models.TextField(
                        blank=True,
                        help_text='Multi-line description to add further provider information such as processing details for processors and producers, hosting details forhosts or basic contact information. CommonMark 0.29 syntax may be used for rich text representation.',
                    ),
                ),
                ('url', models.URLField(blank=True)),
                (
                    'roles',
                    models.ManyToManyField(
                        help_text='Roles of the provider.', to='stac.ProviderRole'
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='link',
            name='reltype',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='+', to='stac.linkreltype'
            ),
        ),
        migrations.AddField(
            model_name='link',
            name='right_catalog',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac.catalog',
            ),
        ),
        migrations.AddField(
            model_name='link',
            name='right_collection',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac.collection',
            ),
        ),
        migrations.AddField(
            model_name='link',
            name='right_item',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='+',
                to='stac.item',
            ),
        ),
        migrations.CreateModel(
            name='ItemAsset',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('key', models.TextField()),
                (
                    'asset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='stac.asset',
                    ),
                ),
                (
                    'item',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='stac.item',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='assets',
            field=models.ManyToManyField(
                related_name='items', through='stac.ItemAsset', to='stac.Asset'
            ),
        ),
        migrations.CreateModel(
            name='CollectionAsset',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('key', models.TextField()),
                (
                    'asset',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='stac.asset',
                    ),
                ),
                (
                    'collection',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='stac.collection',
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name='collection',
            name='assets',
            field=models.ManyToManyField(
                related_name='collections', through='stac.CollectionAsset', to='stac.Asset'
            ),
        ),
        migrations.AddConstraint(
            model_name='itemasset',
            constraint=models.UniqueConstraint(
                fields=('item', 'asset', 'key'), name='itemasset_unique_key'
            ),
        ),
        migrations.AddConstraint(
            model_name='coreitem',
            constraint=models.CheckConstraint(
                check=models.Q(geometry__isnull=False), name='coreitem_at_least_one_non_null'
            ),
        ),
        migrations.AddField(
            model_name='corecollection',
            name='keywords',
            field=models.ManyToManyField(
                help_text='List of keywords describing the Collection.',
                to='stac.CollectionKeywords',
            ),
        ),
        migrations.AddField(
            model_name='coreasset',
            name='roles',
            field=models.ManyToManyField(to='stac.AssetRole'),
        ),
        migrations.AddField(
            model_name='coreasset',
            name='type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='stac.mediatype'
            ),
        ),
        migrations.AddField(
            model_name='commonproviderlink',
            name='providers',
            field=models.ManyToManyField(
                help_text='A list of providers, which may include all organizations capturing or processing the data or the hosting provider.',
                to='stac.ProviderObject',
            ),
        ),
        migrations.AddField(
            model_name='commonprovideritemproperty',
            name='providers',
            field=models.ManyToManyField(
                help_text='A list of providers, which may include all organizations capturing or processing the data or the hosting provider.',
                to='stac.ProviderObject',
            ),
        ),
        migrations.AddField(
            model_name='commonprovideritem',
            name='providers',
            field=models.ManyToManyField(
                help_text='A list of providers, which may include all organizations capturing or processing the data or the hosting provider.',
                to='stac.ProviderObject',
            ),
        ),
        migrations.AddField(
            model_name='commonprovidercollection',
            name='providers',
            field=models.ManyToManyField(
                help_text='A list of providers, which may include all organizations capturing or processing the data or the hosting provider.',
                to='stac.ProviderObject',
            ),
        ),
        migrations.AddField(
            model_name='commonprovidercatalog',
            name='providers',
            field=models.ManyToManyField(
                help_text='A list of providers, which may include all organizations capturing or processing the data or the hosting provider.',
                to='stac.ProviderObject',
            ),
        ),
        migrations.AddField(
            model_name='commonproviderasset',
            name='providers',
            field=models.ManyToManyField(
                help_text='A list of providers, which may include all organizations capturing or processing the data or the hosting provider.',
                to='stac.ProviderObject',
            ),
        ),
        migrations.AddField(
            model_name='commonlicensinglink',
            name='licenses',
            field=models.ManyToManyField(
                help_text='Unique name of the specific platform to which the instrument is attached.',
                to='stac.License',
            ),
        ),
        migrations.AddField(
            model_name='commonlicensingitemproperty',
            name='licenses',
            field=models.ManyToManyField(
                help_text='Unique name of the specific platform to which the instrument is attached.',
                to='stac.License',
            ),
        ),
        migrations.AddField(
            model_name='commonlicensingitem',
            name='licenses',
            field=models.ManyToManyField(
                help_text='Unique name of the specific platform to which the instrument is attached.',
                to='stac.License',
            ),
        ),
        migrations.AddField(
            model_name='commonlicensingcollection',
            name='licenses',
            field=models.ManyToManyField(
                help_text='Unique name of the specific platform to which the instrument is attached.',
                to='stac.License',
            ),
        ),
        migrations.AddField(
            model_name='commonlicensingcatalog',
            name='licenses',
            field=models.ManyToManyField(
                help_text='Unique name of the specific platform to which the instrument is attached.',
                to='stac.License',
            ),
        ),
        migrations.AddField(
            model_name='commonlicensingasset',
            name='licenses',
            field=models.ManyToManyField(
                help_text='Unique name of the specific platform to which the instrument is attached.',
                to='stac.License',
            ),
        ),
        migrations.AddField(
            model_name='commoninstrumentlink',
            name='instruments',
            field=models.ManyToManyField(
                help_text='Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1).',
                to='stac.InstrumentName',
            ),
        ),
        migrations.AddField(
            model_name='commoninstrumentitemproperty',
            name='instruments',
            field=models.ManyToManyField(
                help_text='Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1).',
                to='stac.InstrumentName',
            ),
        ),
        migrations.AddField(
            model_name='commoninstrumentitem',
            name='instruments',
            field=models.ManyToManyField(
                help_text='Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1).',
                to='stac.InstrumentName',
            ),
        ),
        migrations.AddField(
            model_name='commoninstrumentcollection',
            name='instruments',
            field=models.ManyToManyField(
                help_text='Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1).',
                to='stac.InstrumentName',
            ),
        ),
        migrations.AddField(
            model_name='commoninstrumentcatalog',
            name='instruments',
            field=models.ManyToManyField(
                help_text='Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1).',
                to='stac.InstrumentName',
            ),
        ),
        migrations.AddField(
            model_name='commoninstrumentasset',
            name='instruments',
            field=models.ManyToManyField(
                help_text='Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1).',
                to='stac.InstrumentName',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimelink',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    ('created__isnull', False),
                    ('updated__isnull', False),
                    ('start_datetime__isnull', False),
                    ('end_datetime__isnull', False),
                    _connector='OR',
                ),
                name='commondateandtimelink_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimeitemproperty',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    models.Q(('end_datetime__isnull', False), ('start_datetime__isnull', False)),
                    _connector='OR',
                ),
                name='commondateandtimeitemproperty_include_time',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimeitemproperty',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    ('created__isnull', False),
                    ('updated__isnull', False),
                    ('start_datetime__isnull', False),
                    ('end_datetime__isnull', False),
                    _connector='OR',
                ),
                name='commondateandtimeitemproperty_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimeitem',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    ('created__isnull', False),
                    ('updated__isnull', False),
                    ('start_datetime__isnull', False),
                    ('end_datetime__isnull', False),
                    _connector='OR',
                ),
                name='commondateandtimeitem_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimecollection',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    ('created__isnull', False),
                    ('updated__isnull', False),
                    ('start_datetime__isnull', False),
                    ('end_datetime__isnull', False),
                    _connector='OR',
                ),
                name='commondateandtimecollection_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimecatalog',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    ('created__isnull', False),
                    ('updated__isnull', False),
                    ('start_datetime__isnull', False),
                    ('end_datetime__isnull', False),
                    _connector='OR',
                ),
                name='commondateandtimecatalog_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commondateandtimeasset',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('datetime__isnull', False),
                    ('created__isnull', False),
                    ('updated__isnull', False),
                    ('start_datetime__isnull', False),
                    ('end_datetime__isnull', False),
                    _connector='OR',
                ),
                name='commondateandtimeasset_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commonbasicslink',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('title__isnull', False), ('description__isnull', False), _connector='OR'
                ),
                name='commonbasicslink_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commonbasicsitemproperty',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('title__isnull', False), ('description__isnull', False), _connector='OR'
                ),
                name='commonbasicsitemproperty_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commonbasicsitem',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('title__isnull', False), ('description__isnull', False), _connector='OR'
                ),
                name='commonbasicsitem_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commonbasicscollection',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('title__isnull', False), ('description__isnull', False), _connector='OR'
                ),
                name='commonbasicscollection_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commonbasicscatalog',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('title__isnull', False), ('description__isnull', False), _connector='OR'
                ),
                name='commonbasicscatalog_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commonbasicsasset',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('title__isnull', False), ('description__isnull', False), _connector='OR'
                ),
                name='commonbasicsasset_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='collectionasset',
            constraint=models.UniqueConstraint(
                fields=('collection', 'asset', 'key'), name='collectionasset_unique_key'
            ),
        ),
        migrations.AddConstraint(
            model_name='coreasset',
            constraint=models.CheckConstraint(
                check=models.Q(('href__isnull', False), ('type__isnull', False), _connector='OR'),
                name='coreasset_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentlink',
            constraint=models.CheckConstraint(
                check=models.Q(gsd__gt=0), name='commoninstrumentlink_positive_gsd'
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentlink',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('platform__isnull', False),
                    ('constellation__isnull', False),
                    ('mission__isnull', False),
                    ('gsd__isnull', False),
                    _connector='OR',
                ),
                name='commoninstrumentlink_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentitemproperty',
            constraint=models.CheckConstraint(
                check=models.Q(gsd__gt=0), name='commoninstrumentitemproperty_positive_gsd'
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentitemproperty',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('platform__isnull', False),
                    ('constellation__isnull', False),
                    ('mission__isnull', False),
                    ('gsd__isnull', False),
                    _connector='OR',
                ),
                name='commoninstrumentitemproperty_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentitem',
            constraint=models.CheckConstraint(
                check=models.Q(gsd__gt=0), name='commoninstrumentitem_positive_gsd'
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentitem',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('platform__isnull', False),
                    ('constellation__isnull', False),
                    ('mission__isnull', False),
                    ('gsd__isnull', False),
                    _connector='OR',
                ),
                name='commoninstrumentitem_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentcollection',
            constraint=models.CheckConstraint(
                check=models.Q(gsd__gt=0), name='commoninstrumentcollection_positive_gsd'
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentcollection',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('platform__isnull', False),
                    ('constellation__isnull', False),
                    ('mission__isnull', False),
                    ('gsd__isnull', False),
                    _connector='OR',
                ),
                name='commoninstrumentcollection_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentcatalog',
            constraint=models.CheckConstraint(
                check=models.Q(gsd__gt=0), name='commoninstrumentcatalog_positive_gsd'
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentcatalog',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('platform__isnull', False),
                    ('constellation__isnull', False),
                    ('mission__isnull', False),
                    ('gsd__isnull', False),
                    _connector='OR',
                ),
                name='commoninstrumentcatalog_at_least_one_non_null',
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentasset',
            constraint=models.CheckConstraint(
                check=models.Q(gsd__gt=0), name='commoninstrumentasset_positive_gsd'
            ),
        ),
        migrations.AddConstraint(
            model_name='commoninstrumentasset',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('platform__isnull', False),
                    ('constellation__isnull', False),
                    ('mission__isnull', False),
                    ('gsd__isnull', False),
                    _connector='OR',
                ),
                name='commoninstrumentasset_at_least_one_non_null',
            ),
        ),
    ]
